user  www-data;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /run/nginx-mod.pid;


events {
    worker_connections  1024;
}


http {
    default_type  application/octet-stream;

    log_format with_time '$remote_addr - $remote_user [$time_local] '
                     '"$request" $status $body_bytes_sent '
                     '"$http_referer" "$http_user_agent" $request_time';
    access_log /var/log/nginx/access.log with_time;

    #log_format ltsv "time:$time_local"
    #"\thost:$remote_addr"
    #"\tforwardedfor:$http_x_forwarded_for"
    #"\treq:$request"
    #"\tmethod:$request_method"
    #"\turi:$request_uri"

    #"\tstatus:$status"
    #"\tsize:$body_bytes_sent"
    #"\treferer:$http_referer"
    #"\tua:$http_user_agent"
    #"\treqtime:$request_time"
    #"\truntime:$upstream_http_x_runtime"
    #"\tapptime:$upstream_response_time"
    #"\tcache:$upstream_http_x_cache"
    #"\tvhost:$host";

    #access_log  /var/log/nginx/access.log ltsv;
    access_log  on;

    # 基本設定
    sendfile    on;
    tcp_nopush  on;
    tcp_nodelay on;
    types_hash_max_size 2048;
    server_tokens    off;
    open_file_cache max=100 inactive=65s; # file descriptor のキャッシュ。入れた方が良い。 20s->65s

    # proxy buffer の設定。白金動物園が設定してた。
    proxy_buffers 100 32k;
    proxy_buffer_size 8k;

    # mime.type の設定
    include       /etc/nginx/mime.types;

    # Keepalive 設定
    # ベンチマークとの相性次第ではkeepalive off;にしたほうがいい
    # keepalive off;
    # ベンチは1分しか回らない
    keepalive_timeout 65;
    keepalive_requests 500;

    # Proxy cache 設定。使いどころがあれば。1mでkey8,000個。1gまでcache。
    proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=zone1:1m max_size=1g inactive=1h;
    proxy_temp_path  /var/cache/nginx/tmp;
    # オリジンから来るCache-Controlを無視する必要があるなら。。。
    #proxy_ignore_headers Cache-Control;

    # unix domain socket 設定1
    #upstream app {
    #    server unix:/run/unicorn.sock;  # systemd を使ってると `/tmp` 以下が使えない。appのディレクトリに`tmp`ディレクトリ作って配置する方がpermissionでハマらずに済んで良いかも。
    #}

    #gzip on;
    #gzip_types text/html text/css text/javascript;

    map $http_user_agent $badagent {
        default         0;
        ~ISUCONbot(-Mobile)?     1;
        ~Mediapartners-ISUCON      1;
        ~ISUCONFeedSeeker(Beta)?    1;
        ~crawler\ \(https://isucon\.invalid/(support/faq/|help/jp/)       1;
        ~isubot 1;
        ~Isupider 1;
        ~*(bot|crawler|spider)(?:[-_\ ./\;@()]|\$) 1;
    }

    server {
        #root /www/data;

        listen 80 default_server;
        listen [::]:80 default_server;

        client_max_body_size 10m;

        location /api {
            proxy_pass http://localhost:1323;
        }

        location /initialize {
            proxy_pass http://localhost:1323;
        }

        #location / {
        #    proxy_pass http://localhost:1323;
        #}

        location /api/estate/search/condition {
            proxy_cache zone1;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header Host $http_host;
            proxy_pass http://localhost:1323/;
            # デフォルトでは 200, 301, 302 だけキャッシュされる。proxy_cache_valid で増やせる。
            # proxy_cache_valid 200 301 302 3s;
            # cookie を key に含めることもできる。デフォルトは $scheme$proxy_host$request_uri;
            # proxy_cache_key $proxy_host$request_uri$cookie_jessionid;
            # レスポンスヘッダにキャッシュヒットしたかどうかを含める
            add_header X-Nginx-Cache $upstream_cache_status;
    }

        root /www/data;

        location ~ .*\.(htm|html|css|js|jpg|png|gif|ico) {
            expires 24h;
            add_header Cache-Control public;

            open_file_cache max=100;  # file descriptor などを cache

            gzip on;  # cpu 使うのでメリット・デメリット見極める必要あり。gzip_static 使えるなら事前にgzip圧縮した上でそちらを使う。
            gzip_types text/css application/javascript application/json application/font-woff application/font-tff image/gif image/png image/jpeg image/svg+xml image/x-icon application/octet-stream;
            gzip_disable "msie6";
        }

        if ($badagent) {
            return 503;
        }
    }

    include /etc/nginx/conf.d/*.conf;
}
